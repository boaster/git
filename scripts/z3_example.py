#!/usr/bin/env python

# flag{79616e2069732061206e6f6f62}

from z3 import *
import struct

"""
def shifts(key, data):
#	v0 = BitVecVal('0', 32)
	v0 = 0
	for i in range(32):
		if ((key >> i) & 1) == 1:
			v0 ^= ((data >> i) & 1)
	v0 = v0 << 31
	data = (data >> 1)
	return (v0 | data)

def shamble(input):
#	final = [BitVec('final_%s' % i, 32) for i in range(1,9)]
	final = []
	final.append(input[4])
	final.append(input[2])
	final.append(input[1])
	final.append(input[5])
	final.append(input[0])
	final.append(input[3])
	final.append(input[7])
	final.append(input[6])
	return final
"""

def main():
	s = Solver()
	final = [0xF4C0BFEC, 0x677C68FE, 0x36BE477F, 0xC8587D61, 0x5EA2BA26, 0xF4091305, 0x44444444, 0x0140F46E]
#	final = [0xc6db6c72, 0x8426f51d, 0xf8c838a3, 0xf33e72c0, 0x14500040, 0xd7ac3080, 0x50545100, 0x96f820c0]
	key = [BitVec('key_%s' % i, 32) for i in range(1,9)]
	
	s.add(key[0] == 0x85ef5033)
	s.add(key[1] == 85105185)
	s.add(key[2] == 0x234d05c7)
	s.add(key[3] == 0x9a120504)
	s.add(key[4] == 0x50423c3)
	s.add(key[5] == 84157383)
	s.add(key[5] != 0xe4dd40d7)
	s.add(key[6] != 0x1f6559f5)
	s.add(key[7] != 0xe467e28f)
	s.add(key[5] != 549167663)
	s.add(key[6] != 2059309511)
	s.add(key[7] != 1956296888)
	s.add(key[5] != 3244474687)
	s.add(key[6] != 2313536870)
	s.add(key[6] != 314972412)
	s.add(key[5] != 3244474687)
	s.add(key[6] != 4225324057)
	s.add(key[6] != 3684112452)
	s.add(key[6] != 609813001)
	s.add(key[6] != 3295090746)
	s.add(key[6] != 3976729045)
	s.add(key[6] != 2131630274)
	s.add(key[6] != 1829131412)
	s.add(key[6] != 1059730459)
	s.add(key[6] != 2908804064)
	s.add(key[6] != 761922375)
	s.add(key[6] != 2057847812)
	s.add(key[6] != 1699354427)
	s.add(key[6] != 3192391680)
	s.add(key[6] != 1829799310)
	s.add(key[6] != 4268270171)
	s.add(key[6] != 2076281099)
	s.add(key[6] != 3773825801)
	s.add(key[6] != 1834754603)
	s.add(key[6] != 3429894208)
	s.add(key[6] != 925782602)
	s.add(key[6] != 4075428894)
	s.add(key[6] != 2132335292)

	s.add(key[6] != 388878664)
	s.add(key[6] != 3980407851)
	s.add(key[6] != 4280485171)
	s.add(key[6] != 3847618875)
	s.add(key[7] == 4280485171)
	s.add(key[6] != 1636144534)
#                               key_7 is 87229773 == e6f6	
#	s.add(LShR(key[7],24) == 0xff)	 # Ensures "}" at the end


	data = [BitVecVal(0xdeadb00b, 32), BitVecVal(0xdeadbabe, 32), BitVecVal(0xb00bface, 32), BitVecVal(0x400b400b, 32), BitVecVal(0x41414141, 32), BitVecVal(0x42424242, 32), BitVecVal(0x44444444, 32), BitVecVal(0x43434343, 32)]
	for a in range(32):
		for b in range(8):
			v0 = 0
			v1 = BitVec('v1', 32)
			v1 = key[b] & data[b]
			for i in range(32):
				v0 ^= (LShR(v1, i) & 1)
			v0 = v0 << 31
			data[b] = LShR(data[b], 1)
			data[b] = (v0 | data[b])
		data[0], data[4] = data[4], data[0]
		data[1], data[2] = data[2], data[1]
		data[3], data[5] = data[5], data[3]
		data[6], data[7] = data[7], data[6]

	for d in range(len(data)):
		s.add(data[d] == final[d])

	while True:
		print s.check()
		m = s.model()
#		print m
		for d in m.decls():
			print print_val(int("%s" % m[d],10))
		print "================================="

def print_val(val):
	aaa = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
	b = struct.pack("<I", val)
	final = ""
	for i in b:
		final += chr(aaa.index(ord(i)))
	print final

main()
